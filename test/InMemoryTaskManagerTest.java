import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.ArrayList;

class InMemoryTaskManagerTest {
    TaskManager taskManager = Managers.getDefault();

    Duration durationForSubtask1 = Duration.ofMinutes(50);
    LocalDateTime startTime1 = LocalDateTime.of(2024, Month.FEBRUARY,10,4,50);
    Duration durationForSubtask2 = Duration.ofMinutes(120);
    LocalDateTime startTime2 = LocalDateTime.of(2021, Month.SEPTEMBER,21,20,33);
    Duration durationForTask = Duration.ofMinutes(20);
    LocalDateTime startTimeForTask = LocalDateTime.of(2025, Month.MARCH,5,2,30);

    Task task = new Task("Задача 1", "Описание задачи 1",durationForTask,startTimeForTask);
    Epic epic = new Epic("Эпик 1", "Описание эпика 1", new ArrayList<>());

    @Test
    public void testAddDifferentTaskTypes() {
        taskManager.addTask(task);
        taskManager.addEpic(epic);

        Subtask subtask1 = new Subtask("Подзадача 1", "Описание подзадачи 1", epic.getId(),durationForSubtask1,startTime1);

        taskManager.addSubtask(subtask1);

        assertNotNull(taskManager.getTask(task.getId()));
        assertNotNull(taskManager.getEpic(epic.getId()));
        assertNotNull(taskManager.getSubtask(subtask1.getId()));
    }

    @Test
    public void shouldNotConflictBetweenManualAndAutoGeneratedIds() {
        Task manualTask = new Task("Задача 2", "Описание задачи 2", 3,durationForTask.plusDays(10),startTimeForTask.minusHours(1).plusDays(5).minusYears(2));
        assertNotEquals(manualTask.getId(), task.getId());
    }

    @Test
    public void shouldPreserveTaskFieldsWhenAddedToManager() {
        taskManager.addTask(task);
        taskManager.addEpic(epic);

        Subtask subtask1 = new Subtask("Подзадача 1", "Описание подзадачи 1", epic.getId(),durationForSubtask1,startTime1);

        taskManager.addSubtask(subtask1);

        assertEquals(task, taskManager.getTask(task.getId()));
        assertEquals(epic, taskManager.getEpic(epic.getId()));
        assertEquals(subtask1, taskManager.getSubtask(subtask1.getId()));
    }

    @Test
    void deletingEpicShouldDeleteSubtasks() {
        taskManager.addEpic(epic);

        Subtask subtask1 = new Subtask("Подзадача 1", "Описание подзадачи 1", epic.getId(),durationForSubtask1,startTime1);
        taskManager.addSubtask(subtask1);

        taskManager.deleteEpicById(epic.getId());
        assertNull(taskManager.getSubtask(subtask1.getId()));
    }

    @Test
    void shouldUpdateTaskStatusCorrectlyThroughUpdateMethod() {
        Task task = new Task("Задача", "Описание",durationForTask,startTimeForTask);
        taskManager.addTask(task);

        assertEquals(Status.NEW, taskManager.getTask(task.getId()).getStatus());

        Task updatedTask = new Task("Задача", "Описание", Status.DONE, task.getId(),durationForTask,startTimeForTask);
        taskManager.updateTask(updatedTask);

        assertEquals(Status.DONE, taskManager.getTask(task.getId()).getStatus());
    }

    @Test
    void epicShouldNotContainStaleSubtaskIdsAfterRemoval() {
        taskManager.addEpic(epic);

        Subtask subtask1 = new Subtask("Подзадача 1", "Описание 1", epic.getId(),durationForSubtask1,startTime1);
        Subtask subtask2 = new Subtask("Подзадача 2", "Описание 2", epic.getId(),durationForSubtask2,startTime2);

        taskManager.addSubtask(subtask1);
        taskManager.addSubtask(subtask2);
        taskManager.deleteSubtaskById(subtask1.getId());

        assertFalse(epic.getSubtaskIds().contains(subtask1.getId()));
        assertTrue(epic.getSubtaskIds().contains(subtask2.getId()));
    }
}